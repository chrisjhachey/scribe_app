// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post information related to a new Text
	// (POST /text)
	PostText(c *gin.Context)
	// Get information related to a Text
	// (GET /text/{uri})
	GetText(c *gin.Context, uri string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// PostText operation middleware
func (siw *ServerInterfaceWrapper) PostText(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostText(c)
}

// GetText operation middleware
func (siw *ServerInterfaceWrapper) GetText(c *gin.Context) {

	var err error

	// ------------- Path parameter "uri" -------------
	var uri string

	err = runtime.BindStyledParameter("simple", false, "uri", c.Param("uri"), &uri)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter uri: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetText(c, uri)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/text", wrapper.PostText)

	router.GET(options.BaseURL+"/text/:uri", wrapper.GetText)

	return router
}
